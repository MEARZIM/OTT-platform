// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

model Admin {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  password       String
  role           AdminRole @default(ADMIN)
  uploadedVideos Video[]   @relation("UploadedBy") // Admin uploads videos
  createdAt      DateTime  @default(now())
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  email        String        @unique
  profileImage String?
  accounts     Account[]
  ratedVideos  VideoRating[] // Ratings given by users
  createdAt    DateTime      @default(now())
}

model Video {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  url          String
  rating       Float         @default(0) // Average rating
  uploadedById String        @db.ObjectId
  uploadedBy   Admin         @relation("UploadedBy", fields: [uploadedById], references: [id])
  ratedUsers   VideoRating[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  categories VideoCategory[]
}

model VideoRating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String   @db.ObjectId
  rating    Float
  createdAt DateTime @default(now())

  @@unique([userId, videoId]) // A user can rate a video only once
}

model VideoCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  @@unique([videoId, categoryId]) // Ensures no duplicate mappings
}

model Category {
  id     String          @id @default(auto()) @map("_id") @db.ObjectId
  name   String          @unique
  videos VideoCategory[]
}
